-------------------------------------------------------------------------------------------------------------------

Getters

-------------------------------------------------------------------------------------------------------------------

1. The Issue with Direct Access to Fields

Let's consider a Car class with a fuelLevel field:

	public class Car {

	    // Public instance vriable (should be private)
    	    int fuelLevel;			

	    // Constructor (initializes the fuelLevel instance variables)
            public Car(int fuelLevel) {
                this.fuelLevel = fuelLevel;
            }
        }


This code creates an object and initializes the fuelLevel correctly using a constructor.

	// Fuel level is set properly
	Car myCar = new Car(100);

	// Output: 100		
	System.out.println(myCar.fuelLevel);		


Because the fuelLevel field is accessible directly, there's a danger of accidentally setting it to an unrealistic value later in the code.

	// Accidentally set to an incorrect value!
	myCar.fuelLevel = -10;		

-------------------------------------------------------------------------------------------------------------------

2. The Power of Private Fields

We can restrict the direct access to the fields by declaring our fields as private. A private field can only be accessed within the class it is defined:

	public class Car {

	    // Instance variable (private)
	    private int fuelLevel;

	    // Constructor (initializes the fuelLevel instance variables)
	    public Car(int fuelLevel) {
	        this.fuelLevel = fuelLevel;
	    }
	}


Now, if we try to set the fuelLevel directly, we get an error:

	// Fuel level is set properly
	Car myCar = new Car(100);

	// This will result in an error
	myCar.fuelLevel = -10;		

-------------------------------------------------------------------------------------------------------------------

3. Unlockin Field Access with Getters

Even though our fuelLevel field is now private, we still need a way to access the vaue it holds. This is when the getters come to play. A getter is a method that allows us to retrieve the value of a private field. Here's how we would add a getter to out Car class:

	public class Car {

	    // Instance variable (private)
            private int fuelLevel;

	    // Constructor (initializes the fuelLevel instance variables)
    	    public Car(int fuelLevel) {
                this.fuelLevel = fuelLevel;
    	    }

	    // Getter for fuel level instance variable
    	    public int getFuelLevel() {
        	return this.fuelLevel;
    	    }
        }


With this getter, we can access the fuelLevel field without directly manipulating it:

	// Fuel level is set properly
	Car myCar = new Car(100);

	// Retrieves the value of the fuelLevel private field
	int fuel = myCar.getFuelLevel();

-------------------------------------------------------------------------------------------------------------------

4. Encapsultion and Safety

By making the fuelLevel field private and using a getter to access its value, we have implemented the principle of encapsulation. This means we are protecting our data by keeping fields private and providing public methods (as getters) to access these values. Encapsulation helps ensure data integrity by preventing outside code from inadvertently modifying out object's state.

-------------------------------------------------------------------------------------------------------------------

	