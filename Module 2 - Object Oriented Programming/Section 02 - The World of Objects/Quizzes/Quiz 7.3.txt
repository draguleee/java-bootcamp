-------------------------------------------------------------------------------------------------------------------
Quiz 7.3
-------------------------------------------------------------------------------------------------------------------

Question 1:

Fill in the blanks:

_____________ involves making fields private and using getters to access their fields.

Answer: Encapsulation


Explanation:

Encapsulation is a key principle in Object-Oriented Programming, that involves restricting direct access to some of an object's components - that is, its fields or variables. This is achieved by declaring the fields as private, meaning they cannot be accessed or altered directly. 

To interact with these fields, we use public methods known as 'getters' (which allows us to retrieve the value of the field) and 'setters' (which allows us to modify the value). This not only ensures data integrity but also improves security, as it prevents external code from changing field valus in undesired ways.

-------------------------------------------------------------------------------------------------------------------

Question 2: 

What is the expected output:


Main.java

public class Main {
    public static void main(String[] args) {
        
	// Create a Shirt objec
        Shirt nike = new Shirt("Nike", 20.99, "Small");

	// Display Shirt details
        System.out.println("Brand: " + nike.brand);		// Should be nike.getBrand() - will not compile
        System.out.println("Price: " + nike.price);		// Should be nike.getPrice() - will not compile
        System.out.println("Size: " + nike.size);		// Should be nike.getSize() - will not compile
 
    }
}


Shirt.java

public class Shirt {
 
    // Instance variables (private)
    private String brand;
    private double price;
    private String size;
 
    // Constructor ...
 
    // Getter for brand
    public String getBrand() {
        return this.brand;
    }

    // Getter for price
    public double getPrice() {
        return this.price;
    }

    // Getter for size
    public String getSize() {
        return this.size;
    }
 
}   


Answer: 
This code will not compile

Explanation:
You cannot directly access a private field, and that's good! 
private preserves the state of the object by protecting its fields.

-------------------------------------------------------------------------------------------------------------------

Question 3: 

What is the expected output:


Main.java

public class Main {
    public static void main(String[] args) {
        
	// Create a Shirt object
        Shirt nike = new Shirt("Nike", 20.99, "Small");

        // Display details for Shirt object
        System.out.println("Brand: " + nike.getBrand());
        System.out.println("Price: " + nike.getPrice());
        System.out.println("Size: " + nike.getSize());
 
    }
}


Shirt.java

public class Shirt {
 
    // Instane variables (private)
    private String brand;
    private double price;
    private String size;
 
    // Constructor ...
 
    // Getter for brand
    public String getBrand() {
        return this.brand;
    }

    // Getter for price
    public double getPrice() {
        return this.price;
    }

    // Getter for size
    public String getSize() {
        return this.size;
    }
 
}


Answer: 
>>: Brand: Nike
>>: Price: 20.99
>>: Size: Small

Explanation:
Each getter returns a copy of the field's value.

-------------------------------------------------------------------------------------------------------------------

Question 4: 

What is the expected output (notice that the fields aren't private) :


Main.java

public class Main {
    public static void main(String[] args) {
        
	// Create Shirt object
        Shirt nike = new Shirt("Nike", 20.99, "Small");
 
	// (Accidentally) change brand property of nike object
        nike.brand = "woops, accidental update";

	// Display Shirt object info
        System.out.println("Brand: " + nike.brand);
        System.out.println("Price: " + nike.price);
        System.out.println("Size: " + nike.size);
 
    }
}


Shirt.java

public class Shirt {
 
     // Instance variables (PUBLIC)
     String brand;
     double price;
     String size;
 
    // Constructor...
 
    // Getter for brand
    public String getBrand() {
        return this.brand;
    }

    // Getter for price
    public double getPrice() {
        return this.price;
    }

    // Getter for size
    public String getSize() {
        return this.size;
    }
 
}


Answer:
>>: Brand: woops, accidental update
>>: Price: 20.99
>>: Size: Small

Explanation:
Having direct access to a field is dangerous. The field should have been private.

-------------------------------------------------------------------------------------------------------------------

Question 6:

What is the expected output:


Main.java

public class Main {
    public static void main(String[] args) {
        
        Shirt nike = new Shirt("Nike", 20.99, "Small");
 
        String brand = nike.getBrand();
        brand = "woops, accidental update";
 
        System.out.println("Brand: " + nike.getBrand());
        System.out.println("Price: " + nike.getPrice());
        System.out.println("Size: " + nike.getSize());
 
 
    }
}


Shirt.java

public class Shirt {
 
     // Instance variables (PUBLIC)
     String brand;
     double price;
     String size;
 
    // Constructor...
 
    // Getter for brand
    public String getBrand() {
        return this.brand;
    }

    // Getter for price
    public double getPrice() {
        return this.price;
    }

    // Getter for size
    public String getSize() {
        return this.size;
    }
 
}


Answer:
>>: Brand: Nike
>>: Price: 20.99
>>: Size: Small

Explanation:
Each getter returns a copy of the field's value. So, the fields are safe, sound and private.

-------------------------------------------------------------------------------------------------------------------