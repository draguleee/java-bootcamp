-------------------------------------------------------------------------------------------------------------------

Introduction to the Equals Method

-------------------------------------------------------------------------------------------------------------------


1. The Default Equals Method

By default, the equals method compares the references of two objects, as demonstrated in the following code:

Person person = new Person("John", 30);
boolean areEqual = person.equals(new Person("John", 30));

Even though person and the target object have the same name and age, the equals method will return false because it compares their REFERENCES, not their CONTENT.


-------------------------------------------------------------------------------------------------------------------


2. The relationship between equals() and contains()

The default behaviour of the equals() method causes issues when working with the contains() metod of a List.

The contains() method relies on the equals() method to determine if an object is present in the list:

Person john = new Person("John", 30);
Person amy = new Person("Amy", 28);
Person sasha = new Person("Sasha", 29);

List<Person> personList = new ArrayList<>();
personList.add(john);
personList.add(amy);
personList.add(sasha);

boolean isPresent = personList.contains(new Person("John", 30));
System.out.println(isPresent);

>>: false

Despite the target object being identical to 'john', the contains() method determines that it's not present in the list. The problem is that contains(), behind the scenes, is using the default equals() method to compare the reference of each object inside the list against the target object.


-------------------------------------------------------------------------------------------------------------------


3. What is contains() method doing?

Don't let these breakpoints overwhelm you. Instead, concentrate on how the contains() method works internally:
1. Loops through every element inside the List.
2. Uses equals() to compare each element against the specified target.
3. Returns true if at least one of the elements 'equals' the target.
4. False otherwise.


-------------------------------------------------------------------------------------------------------------------


4. Equality Contract

When you override equals(), you must override hashCode() too.


-------------------------------------------------------------------------------------------------------------------




