-------------------------------------------------------------------------------------------------------------------
Quiz 8.1
-------------------------------------------------------------------------------------------------------------------

Question 1:

When creating a new ArrayList, the constructor provides the underlying array with an empty capacity:
public ArrayList() {
this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;

Which represents the current state of your ArrayList?

Answer: String[] elementData => size: 0, capacity: 0

Explanation:
The size is 0 because the underlying array doesn't have any elements. The capacity is 0 because it also doesn't have the capacity to store any elements.

-------------------------------------------------------------------------------------------------------------------

Question 2:

After creating the ArrayList, the size and capacity are initially 0.
String[] elementData => size: 0, capacity: 0

The first element being added is 'Paris':
cities.add("Paris");

Which line of code is going to execute first: 454, or 455?
452 private void add(E e, Object[] elementData, int s) {
453     if (s == elementData.length)    // s = 0, elementData
454         elementData = grow();
455     elementData[s] = e;
456     size = s + 1;
457 }

Consider that s represents the size, and elementData.length represents the capacity.

Answer: 454

Explanation:
Size is thenumber of elements in the underlying array.
Capacity is the overall length of the array. 
When size equals capacity (in this case they are both zero), the first step is to 'grow' the underlying array.

-------------------------------------------------------------------------------------------------------------------

Question 3:

After adding the first element, which image best represents the state of your ArrayList?
First image: resizing to 1 element, and the capacity is 1.
Second image: resizing to 1 element, and the capacity is bigger (10).

Answer: Second image.

Explanation:
As seen in the previous question, the underlying array must 'grow' to a larger capacity before it can accomodate new elements. It would be EXTREMELY inefficient to only grow it by one, since that implies growing the underlying array every single time we add a new element.

-------------------------------------------------------------------------------------------------------------------

Question 4:

Four elements have been added to an ArrayList:
        List<String> cities = new ArrayList<>();	// cities ArrayList
        cities.add("Paris");		// First element
        cities.add("Florence");		// Second element
        cities.add("Venice");		// Third element
        cities.add("Versailles");	// Fourth element
        cities.add("London");		// Fifth element

If we look behind the curtain, we can get a sneak peek at how the ArrayList is maaging the complexities of resizing its underlying array:
elementData: Object[10]@31
> 0: "Paris"
> 1: "Florence"
> 2: "Venice"
> 3: "Versailles"
> 4: "London"
> 5: null
> 6: null
> 7: null
> 8: null
> 9: null

What is the size and the capacity?

Answer:
size: 5
capacity: 10

Explanation:
Size represents the number of elements that were actually stored: 5.
Capacity represents how many elements can be stored before te next resize: 10.

-------------------------------------------------------------------------------------------------------------------

Question 5:

Consider the size and capacity of the ArrayList's underlying array:
elementData: Object[10]@31
> 0: "Paris"
> 1: "Florence"
> 2: "Venice"
> 3: "Versailles"
> 4: "London"
> 5: null	// Petra
> 6: null	// Oslo
> 7: null	// Rome
> 8: null	// Madrid
> 9: null	// Tokyo
=> Prague?

Which element addition will trigger the next resize?
        cities.add("Petra");
        cities.add("Oslo");
        cities.add("Rome");
        cities.add("Madrid");
        cities.add("Tokyo");
        cities.add("Prague");
        cities.add("Dublin");
        cities.add("Athens");

Answer: Prague

Explanation:
After adding Tokyo, the size will be 10 and the capacity will be 10. Before we can add Prague, the ArrayList must 'grow' its underlying array to have a larger capacity. What's beautiful is that all of this happens behind the scenes!

-------------------------------------------------------------------------------------------------------------------